#include "TAACommon.ush"

SCREEN_PASS_TEXTURE_VIEWPORT(InputInfo)

Texture2D gMotionVector;
Texture2D gDepth;
// RWTexture2D<float> gSplatDepth; 
RWBuffer<uint> gSplatDepth; 
RWByteAddressBuffer gForwardMotionVector;


bool outside(int2 pixelPos, int2 dim){
	// BRANCH
    if (pixelPos.x < 0 || pixelPos.y < 0){
        return true;
    }

	// BRANCH
    if (pixelPos.x >= dim.x || pixelPos.y >= dim.y){
        return true;
    }

    return false;
}

[numthreads(16, 16, 1)]
void MyMain(
    uint2 GroupId : SV_GroupID,
	uint GroupThreadIndex : SV_GroupIndex)
	// uint3 GroupId : SV_GroupID,
	// uint3 DispatchThreadId : SV_DispatchThreadID,
	// uint3 GroupThreadId : SV_GroupThreadID,
	// uint GroupIndex : SV_GroupIndex)
{
    int2 PixelPos = (
		ZOrder2D(GroupThreadIndex, log2(1)) +
		GroupId * uint2(1, 1));
    int2 texDim = InputInfo_ViewportMax;

    //float2 prevPixelPos = PixelPos - gMotionVector[PixelPos].xy;
	float2 originMv = gMotionVector[PixelPos].xy;
	float2 prevPixelPos = PixelPos - float2(originMv.x, -1 * originMv.y);
    
	uint indexToClear = PixelPos.y * texDim.x + PixelPos.x;
	gForwardMotionVector.Store(indexToClear * 8, texDim.x * 1000000);
	gForwardMotionVector.Store(indexToClear * 8 + 4, texDim.y * 1000000);
	
	
    int2 prevPixelPosQuad[] = { int2(prevPixelPos), 
                                int2(prevPixelPos.x+1, 
                                     prevPixelPos.y),
                                int2(prevPixelPos.x, 
                                     prevPixelPos.y+1), 
                                int2(prevPixelPos.x+1, 
                                     prevPixelPos.y+1) };
    
    

    for (int i = 0; i < 4; i++){
        int2 currPos = prevPixelPosQuad[i];


        if (!outside(currPos, texDim)){
            uint flattedIndex = currPos.y * texDim.x + currPos.x;
			//InterlockedMax(gSplatDepth[flattedIndex], uint(gDepth[PixelPos].x * 4294967294.0));
			InterlockedMin(gSplatDepth[flattedIndex], uint(gDepth[PixelPos].x * 0.00001 * 4294967294.0));
		}
    }
    
}

